generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum FormatOfWork {
  OFFLINE
  ONLINE
  BOTH
}

enum EventFormat {
  OFFLINE
  ONLINE
}

enum EventPriceFormat {
  FREE
  FIXED_PRICE
  MIN_PRICE
}

model Specialist {
  id                String           @id @default(uuid()) @db.Uuid
  createdAt         DateTime         @default(now())
  firstName         String           @db.VarChar(64)
  lastName          String           @db.VarChar(64)
  surname           String?          @db.VarChar(64)
  specializations   Specialization[]
  gender            Gender?
  yearsOfExperience Int?             @db.SmallInt
  formatOfWork      FormatOfWork?
  addresses         Address[]
  therapies         Therapy[]
  isFreeReception   Boolean?
  description       String?          @db.Text
  phone             String?          @db.VarChar(15)
  email             String?          @unique @db.VarChar(320)
  website           String?          @db.Text
  isActive          Boolean          @default(false)
  instagram         String?          @db.Text
  facebook          String?          @db.Text
  youtube           String?          @db.Text
  linkedin          String?          @db.Text
  tiktok            String?          @db.Text
  viber             String?          @db.Text
  telegram          String?          @db.Text

  @@map("specialist")
}

model Organization {
  id              String             @id @default(uuid()) @db.Uuid
  createdAt       DateTime           @default(now())
  name            String             @db.VarChar(128)
  type            OrganizationType[]
  yearsOnMarket   Int?               @db.SmallInt
  formatOfWork    FormatOfWork?
  addresses       Address[]
  therapies       Therapy[]
  isFreeReception Boolean?
  description     String?            @db.Text
  phone           String?            @db.VarChar(15)
  email           String?            @db.VarChar(320)
  website         String?            @db.Text
  isActive        Boolean            @default(false)
  instagram       String?            @db.Text
  facebook        String?            @db.Text
  youtube         String?            @db.Text
  linkedin        String?            @db.Text
  tiktok          String?            @db.Text
  viber           String?            @db.Text
  telegram        String?            @db.Text

  @@map("organization")
}

model Specialization {
  id          String       @id @default(uuid()) @db.Uuid
  createdAt   DateTime     @default(now())
  name        String       @unique @db.VarChar(128)
  specialists Specialist[]

  @@map("specialization")
}

model District {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  name      String    @unique @db.VarChar(64)
  Address   Address[]

  @@map("district")
}

model OrganizationType {
  id            String         @id @default(uuid()) @db.Uuid
  createdAt     DateTime       @default(now())
  name          String         @unique @db.VarChar(64)
  organizations Organization[]

  @@map("organization_type")
}

model Therapy {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  type        String   @unique @db.VarChar(64)
  title       String   @db.VarChar(128)
  description String   @db.VarChar(255)
  imagePath   String   @db.VarChar(255)
  isActive    Boolean  @default(false)
  priority    Int      @default(0) @db.SmallInt

  specialists   Specialist[]
  organizations Organization[]

  @@map("therapy")
}

model Address {
  id            String         @id @default(uuid()) @db.Uuid
  createdAt     DateTime       @default(now())
  nameOfClinic  String?        @db.VarChar(255)
  fullAddress   String         @db.VarChar(128) // street,building number,floor,room number
  district      District       @relation(fields: [districtId], references: [id])
  districtId    String         @db.Uuid
  specialists   Specialist[]
  organizations Organization[]

  @@map("address")
}

model Feedback {
  id         String   @id @default(uuid()) @db.Uuid
  createdAt  DateTime @default(now())
  name       String   @db.VarChar(128)
  phone      String   @db.VarChar(13)
  email      String?  @db.VarChar(320)
  callMe     Boolean
  message    String   @db.VarChar(320)
  adminNotes String?  @db.VarChar(350)
  isRead     Boolean  @default(false)

  @@map("feedback")
}

model Event {
  id             String            @id @default(uuid()) @db.Uuid
  createdAt      DateTime          @default(now())
  title          String            @db.VarChar(128)
  organizerName  String            @db.VarChar(128)
  notes          String?           @db.VarChar(350)
  address        String?           @db.VarChar(128)
  locationLink   String?           @db.Text
  price          Int?              @db.Integer
  isActive       Boolean           @default(false)
  additionalLink EventLink?        @relation(fields: [linkId], references: [id])
  linkId         String?           @db.Uuid
  eventDate      DateTime?
  format         EventFormat?
  priceType      EventPriceFormat?
  tags           EventTag[]

  @@map("event")
}

model EventLink {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  label     String   @db.VarChar(30)
  link      String   @db.Text
  events    Event[]

  @@unique([label, link])
  @@map("event_link")
}

model EventTag {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  name      String   @unique @db.VarChar(64)
  events    Event[]

  @@map("event_tag")
}

model Faq {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(false)
  question  String
  answer    String   @default("")
  priority  Int?     @db.SmallInt

  @@map("faq")
}
